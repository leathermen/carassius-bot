name: Lint and build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ^1.23
      - uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60
          skip-cache: true
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ^1.23
      - name: Install coverage deps
        run: |
          go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest
          go get github.com/t-yuki/gocover-cobertura
          go install github.com/t-yuki/gocover-cobertura
      - run: go test -race -json -v -covermode atomic -coverprofile coverage.txt ./... 2>&1 | tee /tmp/gotest.log | gotestfmt
      - run: gocover-cobertura < coverage.txt > coverage.xml
      - name: Generate code coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: false
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "50 85"
      - run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  build-producer:
    if: github.ref == 'refs/heads/main'
    name: Build the image
    runs-on: ubuntu-latest
    needs: [test, lint]
    outputs:
      image: ${{ steps.docker-image.outputs.docker_image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: nikitades
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: docker-image
        run: |
          DOCKER_TAG="nikitades/carassius-producer:${GITHUB_SHA::48}"
          echo "docker_image=${DOCKER_TAG}" >> $GITHUB_ENV
          echo "docker_image=${DOCKER_TAG}" >> $GITHUB_OUTPUT
      - name: Build docker image and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile.producer
          tags: nikitades/carassius-producer:latest,${{ env.docker_image }}
          push: true

  build-consumer:
    if: github.ref == 'refs/heads/main'
    name: Build the image
    runs-on: ubuntu-latest
    needs: [test, lint]
    outputs:
      image: ${{ steps.docker-image.outputs.docker_image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: nikitades
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: docker-image
        run: |
          DOCKER_TAG="nikitades/carassius-consumer:${GITHUB_SHA::48}"
          echo "docker_image=${DOCKER_TAG}" >> $GITHUB_ENV
          echo "docker_image=${DOCKER_TAG}" >> $GITHUB_OUTPUT
      - name: Build docker image and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile.consumer
          tags: nikitades/carassius-consumer:latest,${{ env.docker_image }}
          push: true

  deploy:
    name: Deploy producer & consumer
    runs-on: ubuntu-latest
    needs: [build-producer, build-consumer]
    steps:
      - uses: actions/checkout@v4
      - run: mkdir /home/runner/.kube && echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
      - uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.spec.template.spec.containers[0].image = "${{ needs.build-consumer.outputs.image }}"' 'k8s/charts/deployment_consumer.yml'
            yq -i '.spec.template.spec.containers[0].image = "${{ needs.build-producer.outputs.image }}"' 'k8s/charts/deployment_producer.yml'
            yq -i '.stringData.token = "${{ secrets.BOT_TOKEN }}"' 'k8s/charts/secret_consumer.yml'
            yq -i '.stringData.token = "${{ secrets.BOT_TOKEN }}"' 'k8s/charts/secret_producer.yml'
            yq -i '.stringData.database-url = "${{ secrets.DATABASE_URL }}"' 'k8s/charts/secret_consumer.yml'
            yq -i '.stringData.database-url = "${{ secrets.DATABASE_URL }}"' 'k8s/charts/secret_producer.yml'
            yq -i '.stringData.channels = "${{ secrets.CHANNELS }}"' 'k8s/charts/secret_consumer.yml'
            yq -i '.stringData.user = "${{ secrets.DATABASE_USER }}"' 'k8s/charts/secret_postgres.yml'
            yq -i '.stringData.password = "${{ secrets.DATABASE_PWD }}"' 'k8s/charts/secret_postgres.yml'
            yq -i '.stringData.name = "${{ secrets.DATABASE_NAME }}"' 'k8s/charts/secret_postgres.yml'
            yq -i '.data[.dockerconfigjson] = "${{ secrets.DOCKERHUB_AUTH_CONFIG_B64 }}"' 'k8s/charts/secret_dockerhub.yml'
      - run: kubectl --kubeconfig=/home/runner/.kube/config apply -f k8s/charts --recursive -n carassius
